// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: agent/agent.proto

package agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AmbassadorAgentClient is the client API for AmbassadorAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AmbassadorAgentClient interface {
	// IngressInfo uses information from watching the cluster to detect edgissary,
	// which is relayed to the Telepresence traffic-manager for proprietary intercepts
	IngressInfo(ctx context.Context, in *IngressInfoRequest, opts ...grpc.CallOption) (*IngressInfoResponse, error)
}

type ambassadorAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewAmbassadorAgentClient(cc grpc.ClientConnInterface) AmbassadorAgentClient {
	return &ambassadorAgentClient{cc}
}

func (c *ambassadorAgentClient) IngressInfo(ctx context.Context, in *IngressInfoRequest, opts ...grpc.CallOption) (*IngressInfoResponse, error) {
	out := new(IngressInfoResponse)
	err := c.cc.Invoke(ctx, "/agent.AmbassadorAgent/IngressInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AmbassadorAgentServer is the server API for AmbassadorAgent service.
// All implementations must embed UnimplementedAmbassadorAgentServer
// for forward compatibility
type AmbassadorAgentServer interface {
	// IngressInfo uses information from watching the cluster to detect edgissary,
	// which is relayed to the Telepresence traffic-manager for proprietary intercepts
	IngressInfo(context.Context, *IngressInfoRequest) (*IngressInfoResponse, error)
	mustEmbedUnimplementedAmbassadorAgentServer()
}

// UnimplementedAmbassadorAgentServer must be embedded to have forward compatible implementations.
type UnimplementedAmbassadorAgentServer struct {
}

func (UnimplementedAmbassadorAgentServer) IngressInfo(context.Context, *IngressInfoRequest) (*IngressInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngressInfo not implemented")
}
func (UnimplementedAmbassadorAgentServer) mustEmbedUnimplementedAmbassadorAgentServer() {}

// UnsafeAmbassadorAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AmbassadorAgentServer will
// result in compilation errors.
type UnsafeAmbassadorAgentServer interface {
	mustEmbedUnimplementedAmbassadorAgentServer()
}

func RegisterAmbassadorAgentServer(s grpc.ServiceRegistrar, srv AmbassadorAgentServer) {
	s.RegisterService(&AmbassadorAgent_ServiceDesc, srv)
}

func _AmbassadorAgent_IngressInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngressInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmbassadorAgentServer).IngressInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.AmbassadorAgent/IngressInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmbassadorAgentServer).IngressInfo(ctx, req.(*IngressInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AmbassadorAgent_ServiceDesc is the grpc.ServiceDesc for AmbassadorAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AmbassadorAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.AmbassadorAgent",
	HandlerType: (*AmbassadorAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IngressInfo",
			Handler:    _AmbassadorAgent_IngressInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent/agent.proto",
}
